#Primero, importamos todas las librerias necesarias
from matplotlib import pyplot as plt
import numpy as np
import pandas as pd
import plotly.express as px
import math
import streamlit as st
import streamlit.components.v1 as components
from scipy.stats import binom

#Ahora, haremos los ajustes necesarios para la pagina de streamlit
st.set_page_config(page_title="Pacrial 1", page_icon="üåç", layout="wide")
st.markdown("<h1 style='text-align: center; color: blue;'>Distribuci√≥n Binomial</h1>", unsafe_allow_html=True)
st.markdown("""
La **distribuci√≥n binomial** es un modelo de probabilidad que describe el n√∫mero de √©xitos en una secuencia de ensayos independientes, donde cada ensayo tiene exactamente dos resultados posibles: √©xito o fracaso. 

Esta distribuci√≥n est√° definida por dos par√°metros: la probabilidad de √©xito en un solo ensayo (p) y el n√∫mero total de ensayos (n).
""")
st.markdown("""La f√≥rmula para calcular la probabilidad de exactamente k √©xitos en n ensayos, con una probabilidad de √©xito p, es:""")

st.latex(r''' P(x = k) = \binom{n}{k} p^{k} (1-p)^{n-k} ''')

st.markdown("""Donde:
- (n k) es el coeficiente binomial.
- p es la probabilidad de √©xito en un solo ensayo.
- (1 - p) es la probabilidad de fracaso en un solo ensayo.
""")
st.markdown(""" En el caso de esta pa√°gina de streamlit, lo que se realiz√≥ fue: Crear tres inputs para que el usuario pueda ingresar la probabilidad de que el evento deseado suceda, la cantidad de intentos y la cantidad de intentos que se desea que sean exitosos. Tras esto se utiliz√≥ la libreria scipy para calcular la distribuci√≥n binomial y plotearla dentro de la gr√°fica que se muestra en la parte de abajo, la cual cambiar√° dependiendo de los valores que el usuario ingrese. En cuanto a los widget inputs que se utilizaron, estos fueron solamente tres number inputs, los cuales tienen limitados los n√∫meros que pueden ser elegidos para que no se generen errores a la hora de hacer los c√°lculos.""")
st.sidebar.header("Ingreso de Datos")
st.sidebar.markdown("""Esta secci√≥n esta destinada para ingresar los datos necesarios para calcular una distribuci√≥n binomial. Apartir de los datos que sean ingresados en cada recuadro, se le mostrar√° la distribuci√≥n binomial equivalente a esos""")
st.sidebar.image("ECFMLOGO.png")

#Aqu√≠ vamos a solicitar al usuario que ingrese todos los datos necesarios para calcular la distribuci√≥n
prob_exit=st.sidebar.number_input(f"Ingresar la probabilidad de encontrar", min_value=0.00, max_value=1.00,step=0.01, value=0.5)
num_intentos=st.sidebar.number_input(f"Ingresar el n√∫mero de intentos", min_value=0, max_value=90, step=1, value=10)
num_exit=st.sidebar.number_input(f"Ingrese el n√∫mero de casos exitosos deseados", min_value=0, max_value=90, step=1, value=5)

#Agragamos el logo de la escuela para que se vea elegante

#Aqu√≠ usamos scipy para calcular la probabilidad de obtener cierto resultado
x = list(range(num_intentos + 1))
prob = binom.pmf(x, num_intentos, prob_exit)

#Calculamos la probabilidad esperada
prob_esp = binom.pmf(num_exit, num_intentos, prob_exit) if num_exit is not None else None

#Ya con toda la informaci√≥n, podemos plotear la distribuci√≥n binomial
fig = px.bar(x=x, y=prob, labels={'x': 'N√∫mero de casos exitosos', 'y': 'Probabilidad'})
fig.update_layout(
    title='DISTRIBUCI√ìN BINOMIAL PARA DATOS SELECCIONADOS',
    xaxis_title='N√∫mero de casos exitosos',
    yaxis_title='Probabilidad',
    plot_bgcolor='rgba(0, 0, 0, 0)', #Establece el color del plot background (transparente)
    paper_bgcolor='rgba(0, 0, 0, 0)', #Establece el color del paper background (transparente)
    xaxis=dict(showgrid=True, gridcolor='#cecdcd'), #Establece el color del eje x
    yaxis=dict(showgrid=True, gridcolor='#cecdcd'), #Establece el color del eje y
    font=dict(color='#cecdcd'), #Hace que el texto sea de color negro 
    showlegend=True 
)
#Ahora, para que se vea mejor, haremos que una linea remarque el n√∫mero de casos exitosos que se escogi√≥
if num_exit is not None:
    fig.add_vline(x=num_exit, line_dash='dash', line_color='red',
                  annotation_text=f"Casos exitosos seleccionados: {num_exit}", annotation_position="top right")
st.plotly_chart(fig, use_container_width=True)

#Este es un recuadro que va a mostrar la probabilidad esperada para el caso seleccionado
if prob_esp is not None:
    st.success(f"**La probabilidad esperada para {num_exit} casos de exito es: {prob_esp}**")

data = {'N√∫mero de √âxitos (x)': x, 'Probabilidad': prob}
st.table(data)
